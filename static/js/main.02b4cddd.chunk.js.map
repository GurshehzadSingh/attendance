{"version":3,"sources":["components/top.js","components/home.js","components/num.js","components/rollCall.js","components/end.js","App.js","serviceWorker.js","index.js"],"names":["Top","className","Home","roll","setRoll","data","setData","useState","redirect","setRedirect","to","onSubmit","e","preventDefault","tempRoll","limits","newRegister","i","num","present","register","console","log","name","type","min","placeholder","onChange","lecture","parseInt","target","value","required","class","section","subject","Num","raiseClick","select","setSelect","onClick","RollCall","rows","push","id","map","number","key","rollNum","newRoll","handleClick","absent","length","total","presentNo","message","date","document","querySelector","innerHTML","withRouter","App","Date","now","split","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.02b4cddd.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Top() {\n  return (\n    <div className = \"top\">\n      <h1>Attendence App</h1>\n    </div>\n  );\n}\n\nexport default Top;\n","import React, {useState} from 'react';\nimport {Link, Redirect} from 'react-router-dom';\n\nfunction Home({roll, setRoll, data, setData}) {\n  \n  const [redirect, setRedirect] = useState(false)\n\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    let tempRoll = roll.limits[0];\n    let newRegister = {}\n    for(let i = 0; i < roll.limits[1] - roll.limits[0] + 1; i++) {\n      newRegister[ tempRoll ] = {num: tempRoll, present: false}\n      tempRoll++\n    }\n    roll.register = newRegister;\n\n    setRoll(roll);\n    setRedirect(true)\n    console.log(redirect ,roll);\n\n  }\n  // const handleIncrement = (e) => {\n  //   setTest( [test[0]+1] )\n  // }\n\n  return redirect? <Redirect to=\"/rollCall\"/>:(\n    <div>\n     { //<p> Test: { test[0] } </p>\n         //  <button onClick = { handleIncrement }>Increase</button>\n       }\n      <form onSubmit = { handleSubmit }>\n        \n        <div className = \"data-entry\">\n          <div>\n            <label>Lecture</label>\n            <input className=\"num-input\"\n              name=\"Lecture\" \n              type=\"number\" \n              min=\"1\" \n              placeholder=\"Lecture Number\" \n              onChange = {e => data.lecture = parseInt(e.target.value)}\n              // onChange = {e => setRoll(1)}\n              required/>\n          </div>\n          <div>\n            <label>Class  </label>\n            <input className=\"num-input\"\n              name=\"Class\" \n              type=\"number\" \n              min=\"1\" \n              placeholder=\"Class\" \n              onChange = {e => data.class = parseInt(e.target.value)}\n              required/>\n          </div>\n          <div>\n            <label>Section  </label>\n            <input className=\"num-input\"\n              name=\"Section\" \n              type=\"text\"  \n              placeholder=\"Section\" \n              onChange = {e => data.section = e.target.value}\n              required/>\n          </div>\n          <div>\n            <label>Subject  </label>\n            <input className=\"num-input\"\n              name=\"Subject\" \n              type=\"text\"  \n              placeholder=\"Subject\" \n              onChange = {e => data.subject = e.target.value}\n              required/>\n          </div>\n\n        </div>\n        <br/> <br/>\n        <div className=\"limits\">\n          <div>  \n            <label>First Roll Number  </label>    \n            <input className=\"num-input\"\n              name=\"first\" \n              type=\"number\" \n              min=\"1\" \n              placeholder=\"First roll no.\" \n              onChange = {e => roll.limits[0] = parseInt(e.target.value)}\n              // onChange = {e => setRoll(1)}\n              required/>\n          </div>\n          <div>\n            <label>Last Roll Number  </label>  \n            <input className=\"num-input\"\n              name=\"last\" \n              type=\"number\" \n              min=\"2\" \n              placeholder=\"Last roll no.\" \n              onChange = {e => roll.limits[1] = parseInt(e.target.value)}\n              required/>\n          </div>\n          <div>\n            <input type=\"submit\" value=\"submit\" className=\"submit\"/>\n          </div>\n        </div>\n\n      </form>\n\n\n    </div>\n  );\n}\n\nexport default Home;\n","import React, {useState} from 'react';\n\nfunction Num({data, raiseClick}) {\n  const [select, setSelect ] = useState(data.present);\n  const handleClick = () => {\n    setSelect(!select)\n    raiseClick(data.num)\n  }\n  return (\n    <div \n      onClick = { handleClick }\n      className = { select ? 'present' : 'absent' }\n      >\n      <h1>Num : {data.num} </h1>\n    </div>\n  );\n}\n\nexport default Num;\n","import React, { useState, useEffect } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport Num from './num';\n\n\nfunction RollCall({roll, setRoll, data}) {\n\n  const [redirect, setRedirect] = useState(false)\n  // const [absent, setAbsent] = useState([])\n\n  let rows = [];\n  for (let tempRoll = roll.limits[0]; tempRoll <= roll.limits[1]; tempRoll++) {\n    rows.push(tempRoll)\n  }\n\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    \n    let absent = [];\n    for (let i = 0; i < rows.length; i++) {\n      if( !roll.register[ rows[i] ].present )\n        {absent.push(rows[i])}\n    }\n\n    const total  = roll.limits[1] - roll.limits[0];\n    const absentNo = absent.length;\n    const presentNo = total - absentNo;\n    // setAbsent(absent)\n    const message = `\n    <div class=\"final\">\n      <div>\n      <h3> Formal Message </h3>\n      <p>${data.date}</p> \n      <p>Subject: ${data.subject}</p>\n      <p>Class: ${data.class} ${data.section} : ${presentNo}/${total}</p>\n\n      <h3> Informal message </h3>\n      <p>Lecture: ${data.lecture}</p> \n      <p>Attendance: ${presentNo}/${total}</p>\n      <p>Absent Number: ${absent}</p>\n      </div>\n    </div>\n    `\n\n    const ele = document.querySelector('#result')\n    ele.innerHTML = message\n\n  }\n\n  const handleClick  = (rollNum) => {\n    console.log(rollNum)\n    let newRoll = roll;\n    newRoll.register[ rollNum ].present = !newRoll.register[ rollNum ].present\n\n    setRoll(newRoll)\n  }\n\n  \n  // redirect? <Redirect push to=\"/rollCall/end\"/>:\n\n  return (\n    <div id=\"roll\">\n      <div className = \"register\">\n        {rows.map( number => \n          <Num \n            key = {number}\n            data = {roll.register[ number ]}\n            raiseClick = { (rollNum) => handleClick(rollNum) }\n        />\n        )}\n      </div>\n\n      <div className=\"buttons\">\n        <button id=\"submit\" onClick= { handleSubmit }> SUBMIT </button>\n        <button id=\"home\"> <Link to = \"/\"> Home </Link> </button>\n      </div>\n\n      <div id=\"result\">\n\n      </div>\n    </div>\n  );\n}\n\nexport default RollCall;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction End({absent}) {\n  return (\n    <div>\n      <h1>End : {absent}</h1>\n    </div>\n  );\n}\n\nexport default withRouter(End);\n","import React, {useState} from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport './App.css';\n\nimport Top from './components/top';\nimport Home from './components/home';\nimport RollCall from './components/rollCall';\nimport End from './components/end'\n\nfunction App() {\n  const [ roll , setRoll ] = useState({\n    limits: [1,45],\n    register: {}\n  })\n\n  const [data, setData] = useState({\n    lecture: 0,\n    class: 10,\n    section: 'A',\n    subject: 'Social Science',\n    date: Date(Date.now()).split('202')[0]\n  })\n\n  const [ absent , setAbsent ] = useState([])\n  const [ test , setTest ] = useState([0])\n  return (  \n     <div> \n      <Top />\n      <Router>\n        \n          <Route \n            path='/' exact \n            component={() => \n              <Home \n                roll = {roll} \n                setRoll = { (roll) => setRoll(roll) }\n                data = {data}\n                setData = {(data) => setData(data)}  />}\n          />\n          <Route \n            path = '/rollCall' exact\n            component = { () => \n              <RollCall \n                roll = { roll } \n                setRoll = { (roll) => setRoll(roll) }\n                data = {data} \n              />} \n          />\n        \n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}