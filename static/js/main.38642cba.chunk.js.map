{"version":3,"sources":["components/top.js","components/home.js","components/num.js","components/rollCall.js","components/end.js","App.js","serviceWorker.js","index.js"],"names":["Top","className","Home","roll","setRoll","useState","redirect","setRedirect","to","onSubmit","e","preventDefault","tempRoll","limits","newRegister","i","num","present","register","console","log","name","type","min","placeholder","onChange","parseInt","target","value","required","Num","data","raiseClick","select","setSelect","onClick","RollCall","setAbsent","rows","push","id","map","number","key","rollNum","newRoll","handleClick","absent","length","alert","withRouter","App","test","setTest","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.38642cba.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Top() {\n  return (\n    <div className = \"top\">\n      <h1>Attendence App</h1>\n    </div>\n  );\n}\n\nexport default Top;\n","import React, {useState} from 'react';\nimport {Link, Redirect} from 'react-router-dom';\n\nfunction Home({roll, setRoll}) {\n  \n  const [redirect, setRedirect] = useState(false)\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    let tempRoll = roll.limits[0];\n    let newRegister = {}\n    for(let i = 0; i < roll.limits[1] - roll.limits[0] + 1; i++) {\n      newRegister[ tempRoll ] = {num: tempRoll, present: false}\n      tempRoll++\n    }\n    roll.register = newRegister;\n\n    setRoll(roll);\n    setRedirect(true)\n    console.log(redirect ,roll);\n\n  }\n  // const handleIncrement = (e) => {\n  //   setTest( [test[0]+1] )\n  // }\n\n  return redirect? <Redirect to=\"/rollCall\"/>:(\n    <div>\n     { //<p> Test: { test[0] } </p>\n         //  <button onClick = { handleIncrement }>Increase</button>\n       }\n      <form onSubmit = { handleSubmit } className=\"limits\">\n        <input className=\"num-input\"\n          name=\"first\" \n          type=\"number\" \n          min=\"1\" \n          placeholder=\"First roll no.\" \n          onChange = {e => roll.limits[0] = parseInt(e.target.value)}\n          // onChange = {e => setRoll(1)}\n          required/>\n        <input className=\"num-input\"\n          name=\"last\" \n          type=\"number\" \n          min=\"2\" \n          placeholder=\"Last roll no.\" \n          onChange = {e => roll.limits[1] = parseInt(e.target.value)}\n          required/>\n        <input type=\"submit\" value=\"submit\" className=\"submit\"/>\n      </form>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, {useState} from 'react';\n\nfunction Num({data, raiseClick}) {\n  const [select, setSelect ] = useState(data.present);\n  const handleClick = () => {\n    setSelect(!select)\n    raiseClick(data.num)\n  }\n  return (\n    <div \n      onClick = { handleClick }\n      className = { select ? 'present' : 'absent' }\n      >\n      <h1>Num : {data.num} </h1>\n    </div>\n  );\n}\n\nexport default Num;\n","import React, { useState, useEffect } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport Num from './num';\n\n\nfunction RollCall({roll, setRoll}) {\n\n  const [redirect, setRedirect] = useState(false)\n  const [absent, setAbsent] = useState([])\n\n  let rows = [];\n  for (let tempRoll = roll.limits[0]; tempRoll <= roll.limits[1]; tempRoll++) {\n    rows.push(tempRoll)\n  }\n\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    \n    let absent = [];\n    for (let i = 0; i < rows.length; i++) {\n      if( !roll.register[ rows[i] ].present )\n        {absent.push(rows[i])}\n    }\n\n    setAbsent(absent)\n    alert(`Absent numbers are ${absent}`)\n\n  }\n\n  const handleClick  = (rollNum) => {\n    console.log(rollNum)\n    let newRoll = roll;\n    newRoll.register[ rollNum ].present = !newRoll.register[ rollNum ].present\n\n    setRoll(newRoll)\n  }\n\n  \n  // redirect? <Redirect push to=\"/rollCall/end\"/>:\n\n  return (\n    <div id=\"roll\">\n      <div className = \"register\">\n        {rows.map( number => \n          <Num \n            key = {number}\n            data = {roll.register[ number ]}\n            raiseClick = { (rollNum) => handleClick(rollNum) }\n        />\n        )}\n      </div>\n\n      <div className=\"buttons\">\n      <button id=\"submit\" onClick= { handleSubmit }> SUBMIT </button>\n      <button id=\"home\"> <Link to = \"/\"> Home </Link> </button>\n      </div>\n    </div>\n  );\n}\n\nexport default RollCall;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction End({absent}) {\n  return (\n    <div>\n      <h1>End : {absent}</h1>\n    </div>\n  );\n}\n\nexport default withRouter(End);\n","import React, {useState} from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport './App.css';\n\nimport Top from './components/top';\nimport Home from './components/home';\nimport RollCall from './components/rollCall';\nimport End from './components/end'\n\nfunction App() {\n  const [ roll , setRoll ] = useState({\n    limits: [1,45],\n    register: {}\n  })\n  const [ absent , setAbsent ] = useState([])\n  const [ test , setTest ] = useState([0])\n  return (  \n     <div> \n      <Top />\n      <Router>\n        \n          <Route \n            path='/' exact \n            component={() => \n              <Home \n                roll = {roll} \n                setRoll = { (roll) => setRoll(roll) }\n                test = {test} \n                setTest = { (test) => setTest(test)}  />}\n          />\n          <Route \n            path = '/rollCall' exact\n            component = { () => \n              <RollCall \n                roll = { roll } \n                setRoll = { (roll) => setRoll(roll) }\n                setAbsent = { (absent) => setAbsent(absent) }\n              />} \n          />\n        \n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}